class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        unordered_map<int,vector<int>>prereq;
        for(const auto& pair:prerequisites)
        {
            prereq[pair[0]].push_back(pair[1]);
        }
        vector<int>res;
        unordered_set<int>visit;
        unordered_set<int>cycle;
        for(int course=0;course<numCourses;course++)
        {
            if(!dfs(course,prereq,visit,cycle,res))
            {
                return {};
            }
        }
        return res;
    }
    private:
       bool dfs(int course,const unordered_map<int,vector<int>>& prereq,unordered_set<int>& visit,unordered_set<int>& cycle,vector<int>& res)
       {
        if(cycle.count(course))
        {
            return false;
        }
        if(visit.count(course))
        {
            return true;
        }
        cycle.insert(course);
        if(prereq.count(course))
        {
            for(int pre:prereq.at(course))
            {
                if(!dfs(pre,prereq,visit,cycle,res))
                {
                    return false;
                }
            }
        }
        cycle.erase(course);
        visit.insert(course);
        res.push_back(course);
        return true;
       }
};
